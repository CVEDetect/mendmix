(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{828:function(t,e,n){"use strict";n.r(e);var r=n(111),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"功能说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#功能说明"}},[t._v("#")]),t._v(" 功能说明")]),t._v(" "),n("ul",[n("li",[t._v("配置简单(初始化一个类即可)")]),t._v(" "),n("li",[t._v("满足认证授权基本需求")]),t._v(" "),n("li",[t._v("更加贴近日常使用业务场景")]),t._v(" "),n("li",[t._v("可选本地session和共享session")]),t._v(" "),n("li",[t._v("可选是否支持多端同时登录")]),t._v(" "),n("li",[t._v("dubbo、springboot跨服务登录状态传递支持")])]),t._v(" "),n("h3",{attrs:{id:"使用说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用说明"}},[t._v("#")]),t._v(" 使用说明")]),t._v(" "),n("h4",{attrs:{id:"添加依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加依赖"}},[t._v("#")]),t._v(" 添加依赖")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<dependency>\n    <groupId>com.jeesuite</groupId>\n    <artifactId>jeesuite-security</artifactId>\n    <version>[最新版本]</version>\n</dependency>\n")])])]),n("h4",{attrs:{id:"如何集成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何集成"}},[t._v("#")]),t._v(" 如何集成")]),t._v(" "),n("p",[t._v("没有复杂配置，实现抽象类"),n("code",[t._v("SecurityDecisionProvider")]),t._v("即可，例如：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('@Component\npublic class OnePlatformSecurityDecisionProvider extends SecurityDecisionProvider {\n\n\tprivate @Autowired ResourceEntityMapper resourceMapper;\n\tprivate @Autowired ModuleEntityMapper moduleMapper;\n\tprivate @Autowired ResourcesService resourcesService;\n\tprivate @Autowired AccountService accountService;\n\n\t@Override\n\tpublic String contextPath() {\n\t\treturn ResourceUtils.getProperty("server.servlet.context-path", "");\n\t}\n\t\n\t@Override\n\tpublic String[] anonymousUris() {\n\t\treturn StringUtils.splitByWholeSeparator(ResourceUtils.getProperty("anonymous.uris"), ";");\n\t}\n\n\t@Override\n\tpublic BaseUserInfo validateUser(String name, String password) throws UserNotFoundException, UserPasswordWrongException {\n\t\tAccountEntity entity = accountService.findByLoginAccount(name);\n\t\tif(entity == null)throw new UserNotFoundException();\n\t\tpassword = AccountEntity.encryptPassword(password);\n\t\tif(!password.equals(entity.getPassword()))throw new UserPasswordWrongException();\n\t\t\n\t\tLoginUserInfo userInfo = new LoginUserInfo();\n\t\tuserInfo.setId(entity.getId());\n\t\tuserInfo.setUserName(entity.getUsername());\n\t\t\n\t\treturn userInfo;\n\t}\n\n\t@Override\n\tpublic List<String> findAllUriPermissionCodes() {\n\t\tList<String> result = new ArrayList<>();\n\t\tMap<Integer,ModuleEntity> modulesMap = moduleMapper.findAll().stream().collect(Collectors.toMap(ModuleEntity::getId, entity -> entity));\n\t\tList<ResourceEntity> resources = resourceMapper.findResources(ResourceType.uri.name());\n\t\tModuleEntity module;\n\t\tfor (ResourceEntity resource : resources) {\n\t\t\tmodule = modulesMap.get(resource.getModuleId());\n\t\t\tif(module == null)continue;\n\t\t\tif(GlobalContants.MODULE_NAME.equalsIgnoreCase(module.getServiceId()) \n\t\t\t\t\t|| ModuleType.plugin.name().equals(module.getModuleType())){\n\t\t\t\tresult.add(resource.getResource());\n\t\t\t}else{ \n\t\t\t\tresult.add("/" + module.getRouteName() + resource.getResource());\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\n\t@Override\n\tpublic List<String> getUserPermissionCodes(Serializable userId) {\n\t\tSet<String> codes = resourcesService.findAllPermsByUserId((int)userId);\n\t\treturn new ArrayList<String>(codes);\n\t}\n\n\t@Override\n\tpublic void authorizedPostHandle(UserSession session) {\n\t\tLoginSession loginSession = new LoginSession(session.getSessionId(),(int)session.getUserId() , session.getUserName());\n\t\tLoginContext.setLoginSession(loginSession);\n\t\tRequestContext.getCurrentContext().addZuulRequestHeader(WebConstants.HEADER_AUTH_USER,\n\t\t\t\tloginSession.toEncodeString());\n\t}\n\n}\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);